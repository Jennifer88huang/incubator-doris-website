(window.webpackJsonp=window.webpackJsonp||[]).push([[319],{704:function(e,a,t){"use strict";t.r(a);var s=t(43),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"查询执行的统计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查询执行的统计"}},[e._v("#")]),e._v(" 查询执行的统计")]),e._v(" "),t("p",[e._v("本文档主要介绍Doris在查询执行的统计结果。利用这些统计的信息，可以更好的帮助我们了解Doris的执行情况，并有针对性的进行相应"),t("strong",[e._v("Debug与调优工作")]),e._v("。")]),e._v(" "),t("h2",{attrs:{id:"名词解释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#名词解释"}},[e._v("#")]),e._v(" 名词解释")]),e._v(" "),t("ul",[t("li",[e._v("FE：Frontend，Doris 的前端节点。负责元数据管理和请求接入。")]),e._v(" "),t("li",[e._v("BE：Backend，Doris 的后端节点。负责查询执行和数据存储。")]),e._v(" "),t("li",[e._v("Fragment：FE会将具体的SQL语句的执行转化为对应的Fragment并下发到BE进行执行。BE上执行对应Fragment，并将结果汇聚返回给FE。")])]),e._v(" "),t("h2",{attrs:{id:"基本原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本原理"}},[e._v("#")]),e._v(" 基本原理")]),e._v(" "),t("p",[e._v("FE将查询计划拆分成为Fragment下发到BE进行任务执行。BE在执行Fragment时记录了"),t("strong",[e._v("运行状态时的统计值")]),e._v("，并将Fragment执行的统计信息输出到日志之中。 FE也可以通过开关将各个Fragment记录的这些统计值进行搜集，并在FE的Web页面上打印结果。")]),e._v(" "),t("h2",{attrs:{id:"操作流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作流程"}},[e._v("#")]),e._v(" 操作流程")]),e._v(" "),t("p",[e._v("通过Mysql命令，将FE上的Report的开关打开")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("mysql> set is_report_success=true; \n")])])]),t("p",[e._v("之后执行对应的SQL语句之后，在FE的Web页面就可以看到对应SQL语句执行的Report信息：\n"),t("img",{attrs:{src:e.$withBase("https://upload-images.jianshu.io/upload_images/8552201-f5308be377dc4d90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"),alt:"image.png"}})]),e._v(" "),t("p",[e._v("这里会列出最新执行完成的"),t("strong",[e._v("100条语句")]),e._v("，我们可以通过Profile查看详细的统计信息。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Query:\n  Summary:\n    Query ID: 9664061c57e84404-85ae111b8ba7e83a\n    Start Time: 2020-05-02 10:34:57\n    End Time: 2020-05-02 10:35:08\n    Total: 10s323ms\n    Query Type: Query\n    Query State: EOF\n    Doris Version: trunk\n    User: root\n    Default Db: default_cluster:test\n    Sql Statement: select max(Bid_Price) from quotes group by Symbol\n")])])]),t("p",[e._v("这里详尽的列出了"),t("strong",[e._v("查询的ID，执行时间，执行语句")]),e._v("等等的总结信息。接下来内容是打印从BE收集到的各个Fragement的详细信息。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("   Fragment 0:\n     Instance 9664061c57e84404-85ae111b8ba7e83d (host=TNetworkAddress(hostname:10.144.192.47, port:9060)):(Active: 10s270ms, % non-child: 0.14%)\n        - MemoryLimit: 2.00 GB\n        - BytesReceived: 168.08 KB\n        - PeakUsedReservation: 0.00 \n        - SendersBlockedTimer: 0ns\n        - DeserializeRowBatchTimer: 501.975us\n        - PeakMemoryUsage: 577.04 KB\n        - RowsProduced: 8.322K (8322)\n       EXCHANGE_NODE (id=4):(Active: 10s256ms, % non-child: 99.35%)\n          - ConvertRowBatchTime: 180.171us\n          - PeakMemoryUsage: 0.00 \n          - RowsReturned: 8.322K (8322)\n          - MemoryUsed: 0.00 \n          - RowsReturnedRate: 811\n")])])]),t("p",[e._v("这里列出了Fragment的ID；"),t("code",[e._v("hostname")]),e._v("指的是执行Fragment的BE节点；"),t("code",[e._v("Active：10s270ms")]),e._v("表示该节点的执行总时间；"),t("code",[e._v("non-child: 0.14%")]),e._v("表示执行节点自身的执行时间，不包含子节点的执行时间。后续依次打印子节点的统计信息，"),t("strong",[e._v("这里可以通过缩进区分节点之间的父子关系")]),e._v("。")]),e._v(" "),t("h2",{attrs:{id:"profile参数解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#profile参数解析"}},[e._v("#")]),e._v(" Profile参数解析")]),e._v(" "),t("p",[e._v("BE端收集的统计信息较多，下面列出了各个参数的对应含义：")]),e._v(" "),t("h4",{attrs:{id:"fragment"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fragment"}},[e._v("#")]),e._v(" Fragment")]),e._v(" "),t("ul",[t("li",[e._v("AverageThreadTokens: 执行Fragment使用线程数目，不包含线程池的使用情况")]),e._v(" "),t("li",[e._v("Buffer Pool PeakReservation: Buffer Pool使用的内存的峰值")]),e._v(" "),t("li",[e._v("MemoryLimit: 查询时的内存限制")]),e._v(" "),t("li",[e._v("PeakMemoryUsage: 内存使用的峰值")]),e._v(" "),t("li",[e._v("RowsProduced: 处理列的行数")]),e._v(" "),t("li",[e._v("BytesReceived: 通过网络接收的Bytes大小")]),e._v(" "),t("li",[e._v("DeserializeRowBatchTimer: 反序列化的耗时")])]),e._v(" "),t("h4",{attrs:{id:"blockmgr"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#blockmgr"}},[e._v("#")]),e._v(" BlockMgr:")]),e._v(" "),t("ul",[t("li",[e._v("BlocksCreated: 落盘时创建的Blocks数目")]),e._v(" "),t("li",[e._v("BlocksRecycled: 重用的Blocks数目")]),e._v(" "),t("li",[e._v("BytesWritten: 总的落盘写数据量")]),e._v(" "),t("li",[e._v("MaxBlockSize: 单个Block的大小")]),e._v(" "),t("li",[e._v("TotalReadBlockTime: 读Block的总耗时")])]),e._v(" "),t("h4",{attrs:{id:"datastreamsender"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#datastreamsender"}},[e._v("#")]),e._v(" DataStreamSender")]),e._v(" "),t("ul",[t("li",[e._v("BytesSent: 发送的总数据量 = 接受者 * 发送数据量")]),e._v(" "),t("li",[e._v("IgnoreRows: 过滤的行数")]),e._v(" "),t("li",[e._v("OverallThroughput: 总的吞吐量 = BytesSent / 时间")]),e._v(" "),t("li",[e._v("SerializeBatchTime: 发送数据序列化消耗的时间")]),e._v(" "),t("li",[e._v("UncompressedRowBatchSize: 发送数据压缩前的RowBatch的大小")])]),e._v(" "),t("h4",{attrs:{id:"sort-node"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sort-node"}},[e._v("#")]),e._v(" SORT_NODE")]),e._v(" "),t("ul",[t("li",[e._v("InMemorySortTime: 内存之中的排序耗时")]),e._v(" "),t("li",[e._v("InitialRunsCreated: 初始化排序的趟数（如果内存排序的话，该数为1）")]),e._v(" "),t("li",[e._v("SortDataSize: 总的排序数据量")]),e._v(" "),t("li",[e._v("MergeGetNext: MergeSort从多个sort_run获取下一个batch的耗时 (仅在落盘时计时）")]),e._v(" "),t("li",[e._v("MergeGetNextBatch: MergeSort提取下一个sort_run的batch的耗时 (仅在落盘时计时）")]),e._v(" "),t("li",[e._v("TotalMergesPerformed: 进行外排merge的次数")])]),e._v(" "),t("h4",{attrs:{id:"aggregation-node："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aggregation-node："}},[e._v("#")]),e._v(" AGGREGATION_NODE：")]),e._v(" "),t("ul",[t("li",[e._v("PartitionsCreated: 聚合查询拆分成Partition的个数")]),e._v(" "),t("li",[e._v("GetResultsTime: 从各个partition之中获取聚合结果的时间")]),e._v(" "),t("li",[e._v("HTResizeTime:  HashTable进行resize消耗的时间")]),e._v(" "),t("li",[e._v("HTResize:  HashTable进行resize的次数")]),e._v(" "),t("li",[e._v("HashBuckets:  HashTable中Buckets的个数")]),e._v(" "),t("li",[e._v("HashBucketsWithDuplicate:  HashTable有DuplicateNode的Buckets的个数")]),e._v(" "),t("li",[e._v("HashCollisions:  HashTable产生哈希冲突的次数")]),e._v(" "),t("li",[e._v("HashDuplicateNodes:  HashTable出现Buckets相同DuplicateNode的个数")]),e._v(" "),t("li",[e._v("HashFailedProbe:  HashTable Probe操作失败的次数")]),e._v(" "),t("li",[e._v("HashFilledBuckets:  HashTable填入数据的Buckets数目")]),e._v(" "),t("li",[e._v("HashProbe:  HashTable查询的次数")]),e._v(" "),t("li",[e._v("HashTravelLength:  HashTable查询时移动的步数")])]),e._v(" "),t("h4",{attrs:{id:"olap-scan-node"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#olap-scan-node"}},[e._v("#")]),e._v(" OLAP_SCAN_NODE:")]),e._v(" "),t("ul",[t("li",[e._v("RowsProduced: 生成结果的行数")]),e._v(" "),t("li",[e._v("BytesRead: scan node 扫描数据的总量")]),e._v(" "),t("li",[e._v("TotalReadThroughput：吞吐量")]),e._v(" "),t("li",[e._v("TabletCount: tablet 的数目")]),e._v(" "),t("li",[e._v("RowsPushedCondFiltered：下推的过滤器")]),e._v(" "),t("li",[e._v("RawRowsRead: 实际读取的行数")]),e._v(" "),t("li",[e._v("RowsReturned: 该节点返回的行数")]),e._v(" "),t("li",[e._v("RowsReturnedRate: 返回行数的速率")]),e._v(" "),t("li",[e._v("PeakMemoryUsage 内存使用的峰值")])]),e._v(" "),t("h4",{attrs:{id:"buffer-pool"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#buffer-pool"}},[e._v("#")]),e._v(" Buffer pool:")]),e._v(" "),t("ul",[t("li",[e._v("AllocTime: 内存分配耗时")]),e._v(" "),t("li",[e._v("CumulativeAllocationBytes: 累计内存分配的量")]),e._v(" "),t("li",[e._v("CumulativeAllocations: 累计的内存分配次数")]),e._v(" "),t("li",[e._v("PeakReservation: Reservation的峰值")]),e._v(" "),t("li",[e._v("PeakUnpinnedBytes: unpin的内存数据量")]),e._v(" "),t("li",[e._v("PeakUsedReservation: Reservation的内存使用量")]),e._v(" "),t("li",[e._v("ReservationLimit: BufferPool的Reservation的限制量")])])])}),[],!1,null,null,null);a.default=r.exports}}]);